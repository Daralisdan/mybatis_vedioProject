<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- sql映射文件 -->

<!-- namespace：命名空间 ,指定为接口全类名 -->
<mapper namespace="com.daralisdan.dao.EmployeeMapperPlus">
	<!-- // 查询 单个参数 public Employee getEmpId(Integer id); -->
	<!--resultMap:自定义结果集映射封装规则 -->
	<!-- <select id="getEmpId" resultType="com.daralisdan.bean.Employee" > select 
		* from tbl_employee where id = #{id} </select> -->

	<!--resultMap:自定义结果集映射封装规则 自定义某个JavaBean的封装规则 type：自定义规则的java类型（一般写全类名） 
		id：唯一标识 -->
	<resultMap type="com.daralisdan.bean.Employee"
		id="mySigleEmp">
		<!-- 指定主键列的封装规则 id定义之间会底层优化 column：指定每一列(与数据库的字段相对应) property：指定对应的JavaBean属性（与实体类相对应） -->
		<id column="id" property="id" />
		<!-- 定义普通列封装规则 -->
		<result column="Last_name" property="lastName" />
		<!-- 其他不指定列会自动封装，推荐：如果写ResultMap 就把 全部的映射规则都写上 -->
		<result column="email" property="email" />
		<result column="gender" property="gender" />
	</resultMap>

	<!-- // 查询 单个参数 public Employee getEmpId(Integer id); -->
	<!--resultMap:自定义结果集映射封装规则 -->
	<select id="getEmpId" resultMap="mySigleEmp">
		select * from
		tbl_employee
		where id = #{id}
	</select>

	<!-- 场景一： 查询Employee的同时查询员工对应的部门 Employee====department 一个员工有与之对应的部门 id 
		last_name gender email d_id dept_name -->

	<!-- 方法一：联合查询，级联属性封装结果集 -->
	<resultMap type="com.daralisdan.bean.Employee" id="myDifEmp">
		<id column="id" property="id" />
		<result column="last_name" property="lastName" />
		<result column="email" property="email" />
		<result column="gender" property="gender" />
		<result column="d_id" property="dept.id" />
		<result column="dept_name" property="dept.deptName" />
	</resultMap>

	<!-- 方法二：联合查询时：使用association 定义关联的单个对象的封装规则 -->
	
		
		<resultMap type="com.daralisdan.bean.Employee" id="myDifEmp2">
		<id column="id" property="id" />
		<result column="last_name" property="lastName" />
		<result column="email" property="email" />
		<result column="gender" property="gender" />
		
		<!-- assocation 可以指定JavaBean对象
		 property="dept" 指定哪个对象是联合的对象
		 javaType：指定这个属性对象的类型（不能省略） -->
		<association property="dept" javaType="com.daralisdan.bean.Department" >
		<id column="d_id" property="id"/>
		<result column="dept_name" property="deptName"/>
	
		</association>
		</resultMap>

	<!-- //查询员工带有部门 public Employee getEmpIdDept(Integer id); -->
	<select id="getEmpIdDept" resultMap="myDifEmp2">
		select e.id,e.last_name,e.gender,e.email,e.d_id,d.dept_name deptName
		from tbl_employee e,tbl_dept d
		where e.d_id=d.id
		and e.id=#{id}
	</select>

<!-- 使用association分布查询
       1.先按照员工id查出员工 信息
       2.根据查询出的员工信息中d_id去部门表查出部门信息
       3.部门设置到员工中
 -->
    <!-- //association 分步查询
  public Employee getEmpAndDeptStep(Integer id); -->
<!--  id  last_name  gender  email  d_id   -->
	<resultMap type="com.daralisdan.bean.Employee"
	id="myEmpByStep">
	<id column="id" property="id" />
     <result column="last_name" property="lastName"/>
    <result column="gender" property="gender"/>
    <result column="email" property="email"/>
    <!--association 定义单个关联对象的封装规则
    property="dept" 指定联合的对象
    select="com.daralisdan.dao.DepartMapper.getDeptById" 查询出部门信息，调用的是查询部门的方法
    property="dept" ：dept的值是通过select属性指定的方法查出的结果
     select：表明当前属性是调用select指定的
     column：指定将哪一列的值传给select指定的这个方法
     
     流程：使用select指定的方法（column指定的这列参数值）查出对象，并封装给property指定的属性
     -->
	<association property="dept"
	select="com.daralisdan.dao.DepartMapper.getDeptById" column="d_id"></association>
</resultMap>
	<select id="getEmpAndDeptStep" resultMap="myEmpByStep">
		select * from
		tbl_employee where id = #{id}
	</select>

	<!-- 可以使用延迟加载
	   Employee=====>Dept
	   我们每次查询Employee对象的时候，都将一起查询出来
	   部门信息在我们使用的时候再去查询
	   在分步查询的基础之上加上两个配置就可以完成上述功能
	 -->
<!-- =========================association==================================== -->


<!-- 场景二：
   查询部门的时候，将部门对应的所有员工信息也查询出来,注释在DepartMapper.xml查看
 -->
 
<!--  //根据部门id,查询所有员工
  public List<Employee>  getEmpByDeptId(Integer DeptId);
  resultType:返回值类型，返回的是一个List，直接写list集合里面的元素类型
   -->

<select id="getEmpByDeptId"
	resultType="com.daralisdan.bean.Employee">
	select * from
	tbl_employee where d_id = #{deptId}
</select>

<!-- <discriminator javaType=""></discriminator>
    鉴别器：mybatis可以使用鉴别器判断某列的值，然后根据某列的值改变封装行为
 	封装Employee: 
 	  如果查出是女生，就把部门信息查询出来
 	  如果查出是男生，就把last_name赋值给email
 -->
<!-- <resultMap type="com.daralisdan.bean.Employee" id="MyEmpDis">
	<id column="id" property="id" />
	<result column="last_name" property="lastName" />
	<result column="gender" property="gender" />
	<result column="email" property="email" />
	
	column:指定判断的列名 
		javaType：列值对应的java类型
	
	<discriminator javaType="string" column="gender">
	女生，resultType：指定封装结果的类型
	<case value="0" resultType="com.daralisdan.bean.Employee">
	<association property="dept"
		select="com.daralisdan.dao.DepartMapper.getDeptById" column="d_id">
	</association>
	</case>
	如果查出是男生，就把last_name赋值给email
	<case value="1" resultType="com.daralisdan.bean.Employee">
		id column="id" property="id" />
		<result column="last_name" property="lastName" />
		<result column="gender" property="gender" />
		<result column="last_name" property="email" />
	</case>
</discriminator>
</resultMap>
 -->





</mapper>