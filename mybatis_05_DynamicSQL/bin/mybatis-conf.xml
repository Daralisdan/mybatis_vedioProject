<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
 PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!-- 全局配置文件 -->
<configuration>
	<!--1. properties:mybatis可以使用它来引入外部properties配置文件的内容 参数1：resource：引入类路径下的资源时使用 
		参数2：URL:引入网络路径或者磁盘路径下的资源时使用 -->
	<properties resource="dbconfig.properties"></properties>

	<!--2.settings: 该配置包含很多重要的的设置项 setting：用来设置每一个设置项 name:设置类名 value：设置项取值 -->
	<settings>
		<!-- 开启驼峰命名规则，与数据库映射 -->
		<setting name="mapUnderscoreToCamelCase" value="true" />
	
	 <!-- 延迟加载的配置 -->
	<!--显示的指定每个我们需要更改的配置的值，即使他是默认的，防止版本更新带来的问题  --> 
	 <setting name="lazyLoadingEnabled" value="true" />
	<setting name="aggressiveLazyLoading" value="false" />
	</settings>

	<!-- 3. typeAliases:别名处理器，可以为我们java类型起别名 （别名不区分大小写） type:指定要起别名的全类名，默认别名就是类名小写 
		alias：指定新别名 -->
	<typeAliases>
		<!-- 3.1单个起别名 -->
		<!-- <typeAlias type="com.daralisdan.bean.Employee" alias="emp"/> -->

		<!--3.2 批量起别名 package:为某个包下所有类批量起别名 name:指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写） 
			注意：默认别名不区分大小写） -->
		<!-- 批量起别名的情况下，使用@Alias注解为某个实体类指定新的别名 -->
		<package name="com.daralisdan.bean" />
	</typeAliases>


	<!-- 4.typeHandlers：类型处理器（javabean实体类的类型与数据库类型映射的桥梁） -->
	<!-- <typeHandlers></typeHandlers> -->
	<!-- 5.插件 ： -->
	<!-- <plugins></plugins> -->



	<!-- 6.environments：运行环境们，mybatis可以配置多种环境，default指定使用某种环境，可以达到快速切换环境 environment：配置具体的环境信息，必须有下面两个标签，id代表当前环境的唯一标识 
		transactionManager：事物管理器， type：事物管理器类型（详情见Configuration.class JDBC(JDBC是别名：JdbcTransactionFactory.class) 
		|MANAGED MANAGED是别名（ManagedTransactionFactory.class）） dataSource：数据源 type：（UNPOOLED(不使用连接池)| 
		POOLED（使用连接池）| JNDI） （详情见Configuration.class UNPOOLED：JndiDataSourceFactory.class 
		|POOLED：PooledDataSourceFactory.class |JNDI：UnpooledDataSourceFactory.class） -->
	<environments default="development">
		<!-- 测试环境 -->
		<!--<environment id="test"> <transactionManager type="JDBC"></transactionManager> 
			<dataSource type=""></dataSource> </environment> -->

		<!-- 开发环境 -->
		<environment id="development">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.user}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
	</environments>


	<!-- 7. databaseIdProvider:支持多数据库厂商： type="DB_VENDOR":得到数据库厂商标识（驱动getDatabaseProductName()),mybatis就能根据数据库厂商标识来执行不同的sql 
		例：Mysql，Oracle，SQL server，xxxx -->
	<!-- <databaseIdProvider type="DB_VENDOR"> 为不同数据库厂商起别名,然后在mybatis映射文件中告诉mybatis 
		该sql语句是哪个数据库厂商发的 <property name="MySQL" value="mysql"/> <property name="Oracle" 
		value="oracle"/> <property name="SQL Server" value="sqlserver"/> </databaseIdProvider> -->






	<!-- 8.mappers:将sql映射注册到全局配置中 mapper：注册一个sql映射（注册配置文件） resource：引用类路径下的sql映射文件 
		url:引用网络路径或者磁盘路径下的sql映射文件 -->
	<!-- 将写好的sql映射文件（EmployeeMapper.xml），注册到全局配置文件中（mybatis-conf.xml） -->
	<mappers>
		<!-- <mapper resource="com/daralisdan/dao/EmployeeMapper.xml" /> -->

		<!-- 注册接口 class：引用接口 1.有sql映射文件，映射文件名必须与接口同名，并且放在与接口同一目录下 2.没有sql映射文件，所有的sql都是利用注解写在接口上 
			注意：一般重要的dao接口，写sql映射文件 不重要的，简单的dao接口，为了快速开发，可以写注解sql -->
		<!-- <mapper class="com.daralisdan.dao.EmployeeMapper"/> -->

		<!-- 没有sql映射文件，所有的sql都是利用注解写在接口上 -->
		<!-- <mapper class="com.daralisdan.dao.EmployeeMapperAnnotation"/> -->

		<!-- 批量注册,放在与接口同一目录下 -->
		<package name="com.daralisdan.dao" />




	</mappers>

</configuration>